@page "/report-bug"
@rendermode InteractiveServer
@using Accede.AzureDevOps.Configuration
@using Accede.AzureDevOps.Models
@using BlazorApp.Extensions
@using Microsoft.Extensions.Options
@using ReportBugInAzureDevOps.Accede.AzureDevOps.Abstractions

@inject IOptions<AzureDevOpsWorkItemConfiguration>? Configuration
@inject ILogger<ReportBug> Logger
@inject IBugClient BuggerReporter

<PageTitle>Report Bug</PageTitle>
<h4>Report Bug on Azure DevOps - @Configuration?.Value.OrganizationName / @Configuration?.Value.ProjectName</h4>

<form class="col-6" method="post" @onsubmit="Submit" @formname="report-bug-form">
    <AntiforgeryToken />
    <div class="mb-3">
        <label class="form-label">Title:</label>
        <InputText class="form-control" @bind-Value="Model.Title" />
    </div>

    <div class="mb-3">
        <label class="form-label">StepToReproduce:</label>
        <InputTextArea class="form-control" @bind-Value="Model.StepToReproduce" />
    </div>

    <div class="mb-3">
        <label class="form-label">Priority:</label>
        <InputSelect class="form-select" @bind-Value="Model.Priority">
            @foreach (var type in Enum.GetValues(typeof(Priority)).Cast<Priority>())
            {
                <option value="@type">@type.ToString()</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label class="form-label">Attachments:</label>
        <div class="input-group">
            <InputFile class="form-control" OnChange="HandleFiles" multiple />
            <span @onclick="ClearFiles" style="cursor: pointer;" class="input-group-text" aria-hidden="true">Clear
                Files</span>
        </div>
        <ul class="list-group">
            @foreach (var file in Files)
            {
                <li class="list-group-item d-flex justify-content-between align-items-center">@file.FileName
                    <span id="@file.FileName" style="cursor: pointer;" @onclick="() => RemoveFile(file.FileName)"
                        class="badge text-danger-emphasis">x</span>
                </li>
            }
        </ul>
    </div>

    <div>
        <button class="btn btn-primary" type="submit">Submit</button>
    </div>
</form>

@code {
    [SupplyParameterFromForm]
    private BugInputDto Model { get; set; } = new() { Title = "", StepToReproduce = "" };

    private List<IFormFile> Files { get; set; } = new();

    private async Task Submit()
    {
        try
        {
            int? result = 0;
            if (Files.Count == 0)
            {
                result = await BuggerReporter.CreateBugAsync(new BugInput()
                {
                    Title = Model.Title,
                    StepToReproduce = Model.StepToReproduce,
                    Priority = Model.Priority,
                });
            }
            else
            {
                result = await BuggerReporter.CreateBugWithAttachments(new BugInput()
                {
                    Title = Model.Title,
                    StepToReproduce = Model.StepToReproduce,
                    Priority = Model.Priority,
                }, Files.ToArray());
            }

            if (result > 0)
                Logger.LogInformation("Request was successful");
            else
                Logger.LogError("Request failed");
        }
        catch (Exception e)
        {
            Logger.LogError("Request failed with message: {message}", e.Message);
        }
    }

    private async Task HandleFiles(InputFileChangeEventArgs args)
    {
        var files = args.GetMultipleFiles();
        var iFormFiles = await FileConversionHelper.ConvertToIFormFileListAsync(files.ToList());
        Files.AddRange(iFormFiles);
    }

    private void ClearFiles() => Files = [];
    

    private void RemoveFile(string fileName)
    {
        var fileToRemove = Files.FirstOrDefault(f => f.FileName == fileName);
        if (fileToRemove != null)
        {
            Files.Remove(fileToRemove);
        }
    }

    private record BugInputDto
    {
        public required string Title { get; set; }
        public Priority Priority { get; set; }
        public Severity Severity { get; set; }
        public required string StepToReproduce { get; set; }
    }
}
